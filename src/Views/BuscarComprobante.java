/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Views;

import Controllers.CellRenderer;
import Controllers.ConnectionDB;
import Models.Cliente;
import Models.ComprobantePago;
import Models.Producto;
import com.apple.eawt.Application;
import java.awt.Color;
import java.awt.Event;
import java.awt.Image;
import java.awt.Point;
import java.awt.Toolkit;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.beans.PropertyChangeEvent;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JTable;
import javax.swing.RowFilter;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumn;
import javax.swing.table.TableRowSorter;

/**
 *
 * @author javierfuenteshuertas
 */
public class BuscarComprobante extends javax.swing.JFrame {

    /**
     * Creates new form BuscarComprobante
     */
    private int idEmpresa;
    private String tipoComprobante;
    private ConnectionDB conexion;
    private Connection conn;
    private Cliente cliente;
    private ArrayList<String> listComprobantes;
    private ArrayList<Producto> listProducto;
    private Comprobante comp;
    boolean band;
    private TableRowSorter trsfiltro;
    //La bandera indica si la búsqueda se modifica el campo jtCliente
    public BuscarComprobante(int idEmpresa,String tipoComprobante,Comprobante comp,boolean band) {
        initComponents();
        this.idEmpresa=idEmpresa;
        this.tipoComprobante=tipoComprobante;
        this.comp=comp;
        this.band=band;
        conexion=new ConnectionDB();
        conn=conexion.connect(conn);
        initializeEvents();
        buscarComprobantes(tipoComprobante, idEmpresa, "%");
        jdmComprobante.addPropertyChangeListener(new java.beans.PropertyChangeListener(){

            @Override
            public void propertyChange(PropertyChangeEvent evt) {
                buscarComprobantes(tipoComprobante,idEmpresa,jtCliente.getText()+"%");
            }
            
        });
        jdyComprobante.addPropertyChangeListener(new java.beans.PropertyChangeListener(){

            @Override
            public void propertyChange(PropertyChangeEvent evt) {
                buscarComprobantes(tipoComprobante,idEmpresa,jtCliente.getText()+"%");
            }
            
        });
        if(band){
            jtCliente.setEditable(false);
            jtCliente.setBackground(new Color(254,191,36));
        }
        String sSistemaOperativo = System.getProperty("os.name");
        if(sSistemaOperativo.equals("Mac OS X")){
            Application application = Application.getApplication();
            Image image = Toolkit.getDefaultToolkit().getImage(getClass().getResource("/Images/logoKipu.png"));
            application.setDockIconImage(image);
        }
        else{
            Image icon = Toolkit.getDefaultToolkit().getImage(getClass().getResource("/Images/logoKipu.png"));
            this.setIconImage(icon);
        }
    }
    public void setBusqueda(String nomCliente){
        jtCliente.setText(nomCliente);
        buscarComprobantes(tipoComprobante, idEmpresa, nomCliente);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jtCliente = new javax.swing.JTextField();
        jdmComprobante = new com.toedter.calendar.JMonthChooser();
        jdyComprobante = new com.toedter.calendar.JYearChooser();
        jcbValidados = new javax.swing.JCheckBox();
        jcbGuardados = new javax.swing.JCheckBox();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jtaComprobantes = new javax.swing.JTable();

        jPanel1.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));

        jLabel1.setText("Buscar:");

        jtCliente.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jtClienteKeyPressed(evt);
            }
        });

        jcbValidados.setSelected(true);
        jcbValidados.setText("Validados");
        jcbValidados.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jcbValidadosStateChanged(evt);
            }
        });
        jcbValidados.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jcbValidadosActionPerformed(evt);
            }
        });

        jcbGuardados.setSelected(true);
        jcbGuardados.setText("Guardados");
        jcbGuardados.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jcbGuardadosStateChanged(evt);
            }
        });
        jcbGuardados.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jcbGuardadosActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jtCliente)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jcbValidados)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jcbGuardados)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jdmComprobante, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jdyComprobante, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jdyComprobante, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jdmComprobante, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel1)
                        .addComponent(jtCliente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jcbValidados)
                        .addComponent(jcbGuardados)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Comprobantes"));

        jtaComprobantes.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Serie", "Número", "Fecha Emisión", "Cliente", "Ruc", "Total", "Estado"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, true, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jtaComprobantes.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(jtaComprobantes);
        if (jtaComprobantes.getColumnModel().getColumnCount() > 0) {
            jtaComprobantes.getColumnModel().getColumn(0).setMinWidth(60);
            jtaComprobantes.getColumnModel().getColumn(0).setPreferredWidth(60);
            jtaComprobantes.getColumnModel().getColumn(0).setMaxWidth(60);
            jtaComprobantes.getColumnModel().getColumn(1).setMinWidth(100);
            jtaComprobantes.getColumnModel().getColumn(1).setPreferredWidth(100);
            jtaComprobantes.getColumnModel().getColumn(1).setMaxWidth(100);
            jtaComprobantes.getColumnModel().getColumn(2).setMinWidth(120);
            jtaComprobantes.getColumnModel().getColumn(2).setPreferredWidth(120);
            jtaComprobantes.getColumnModel().getColumn(2).setMaxWidth(120);
            jtaComprobantes.getColumnModel().getColumn(3).setMinWidth(250);
            jtaComprobantes.getColumnModel().getColumn(3).setPreferredWidth(250);
            jtaComprobantes.getColumnModel().getColumn(3).setMaxWidth(250);
            jtaComprobantes.getColumnModel().getColumn(4).setMinWidth(100);
            jtaComprobantes.getColumnModel().getColumn(4).setPreferredWidth(100);
            jtaComprobantes.getColumnModel().getColumn(4).setMaxWidth(100);
            jtaComprobantes.getColumnModel().getColumn(5).setMinWidth(80);
            jtaComprobantes.getColumnModel().getColumn(5).setPreferredWidth(80);
            jtaComprobantes.getColumnModel().getColumn(5).setMaxWidth(80);
        }

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 815, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 275, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 8, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jtClienteKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jtClienteKeyPressed
        if(evt.getKeyCode()==Event.ENTER){
            buscarComprobantes(tipoComprobante,idEmpresa,jtCliente.getText()+"%");
        }
    }//GEN-LAST:event_jtClienteKeyPressed

    private void jcbValidadosStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jcbValidadosStateChanged
       
    }//GEN-LAST:event_jcbValidadosStateChanged

    private void jcbValidadosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jcbValidadosActionPerformed
        if(jcbGuardados.isSelected() && jcbValidados.isSelected()){
            trsfiltro = new TableRowSorter(jtaComprobantes.getModel());
            trsfiltro.setRowFilter(RowFilter.regexFilter("GUARDADO|VALIDADO", 6));
            jtaComprobantes.setRowSorter(trsfiltro);
        }
        else if(!jcbGuardados.isSelected() && jcbValidados.isSelected()){
            trsfiltro = new TableRowSorter(jtaComprobantes.getModel());
            trsfiltro.setRowFilter(RowFilter.regexFilter("VALIDADO", 6));
            jtaComprobantes.setRowSorter(trsfiltro);
        }
        else if(jcbGuardados.isSelected() && !jcbValidados.isSelected()){
            trsfiltro = new TableRowSorter(jtaComprobantes.getModel());
            trsfiltro.setRowFilter(RowFilter.regexFilter("GUARDADO", 6));
            jtaComprobantes.setRowSorter(trsfiltro);
        }
        else{
            trsfiltro = new TableRowSorter(jtaComprobantes.getModel());
            trsfiltro.setRowFilter(null);
            jtaComprobantes.setRowSorter(trsfiltro);
        }
    }//GEN-LAST:event_jcbValidadosActionPerformed

    private void jcbGuardadosStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jcbGuardadosStateChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_jcbGuardadosStateChanged

    private void jcbGuardadosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jcbGuardadosActionPerformed
        if(jcbGuardados.isSelected() && jcbValidados.isSelected()){
            trsfiltro = new TableRowSorter(jtaComprobantes.getModel());
            trsfiltro.setRowFilter(RowFilter.regexFilter("GUARDADO|VALIDADO", 6));
            jtaComprobantes.setRowSorter(trsfiltro);
        }
        else if(!jcbGuardados.isSelected() && jcbValidados.isSelected()){
            trsfiltro = new TableRowSorter(jtaComprobantes.getModel());
            trsfiltro.setRowFilter(RowFilter.regexFilter("VALIDADO", 6));
            jtaComprobantes.setRowSorter(trsfiltro);
        }
        else if(jcbGuardados.isSelected() && !jcbValidados.isSelected()){
            trsfiltro = new TableRowSorter(jtaComprobantes.getModel());
            trsfiltro.setRowFilter(RowFilter.regexFilter("GUARDADO", 6));
            jtaComprobantes.setRowSorter(trsfiltro);
        }
        else{
            trsfiltro = new TableRowSorter(jtaComprobantes.getModel());
            trsfiltro.setRowFilter(null);
            jtaComprobantes.setRowSorter(trsfiltro);
        }
    }//GEN-LAST:event_jcbGuardadosActionPerformed

    /**
     * @param args the command line arguments
     */
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JCheckBox jcbGuardados;
    private javax.swing.JCheckBox jcbValidados;
    private com.toedter.calendar.JMonthChooser jdmComprobante;
    private com.toedter.calendar.JYearChooser jdyComprobante;
    private javax.swing.JTextField jtCliente;
    private javax.swing.JTable jtaComprobantes;
    // End of variables declaration//GEN-END:variables

    private void initializeEvents() {
        getRootPane().getInputMap(javax.swing.JComponent.WHEN_IN_FOCUSED_WINDOW).put(
            javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_ESCAPE, 0), "Cancel");
        
        getRootPane().getActionMap().put("Cancel", new javax.swing.AbstractAction(){
            @Override
            public void actionPerformed(java.awt.event.ActionEvent e)
            {
               setVisible(false);
            }
        });
        getRootPane().getInputMap(javax.swing.JComponent.WHEN_IN_FOCUSED_WINDOW).put(
            javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_ENTER, 0), "Buscar");
        
        getRootPane().getActionMap().put("Buscar", new javax.swing.AbstractAction(){
            @Override
            public void actionPerformed(java.awt.event.ActionEvent e)
            {
               //Buscar clientes
            }
        });
        jtaComprobantes.addMouseListener(new MouseAdapter() {
        public void mousePressed(MouseEvent me) {
            JTable table =(JTable) me.getSource();
            Point p = me.getPoint();
            int row = table.rowAtPoint(p);
            if (me.getClickCount() == 2) {
                PreparedStatement stmt;
                cliente=new Cliente();
                try {
                    stmt = conn.prepareStatement("select * from cliente where numero=?");
                    stmt.setString(1, (String) jtaComprobantes.getValueAt(row, 4));
                    ResultSet rs=stmt.executeQuery();
                    if(rs.next()){
                        cliente.setNumero(rs.getString("numero"));
                        cliente.setTipoDocumento(rs.getString("tipoDocumento"));
                        cliente.setDireccion(rs.getString("direccion"));
                        cliente.setEmail(rs.getString("email"));
                        cliente.setNombre(rs.getString("nombre"));
                    }
                    comp.setCliente(cliente);
                    agregarComprobante(listComprobantes.get(row));
                    agregarProductos(listComprobantes.get(row)); 
                    if(!band)comp.cargarComprobante();
                    setVisible(false);
                } catch (SQLException ex) {
                    Logger.getLogger(Clientes.class.getName()).log(Level.SEVERE, null, ex);
                }
                
            }
        }

        });
    }
    private void buscarComprobantes(String tipoComprobante,int idEmpresa,String cliente) {
        PreparedStatement stmt;
        try {
                stmt = conn.prepareStatement("select  serieComprobante,fechaEmision,nombre,numero,total,estado  from ComprobantePago cp inner join Cliente c on cp.Cliente_numero= c.numero where Empresa_idEmpresa=? and TipoComprobante_idTipoComprobante=? and MONTH(fechaEmision)=? and YEAR(fechaEmision)=? and c.nombre like ?");
                stmt.setInt(1, idEmpresa);
                stmt.setString(2, tipoComprobante);
                stmt.setInt(3,jdmComprobante.getMonth()+1);
                stmt.setInt(4,jdyComprobante.getYear());
                stmt.setString(5, "%"+cliente+"%");
            ResultSet rs=stmt.executeQuery();
            listComprobantes=new ArrayList<String>();
            actualizarTablaComprobante(rs);
            this.setCellRender(jtaComprobantes);
        } catch (SQLException ex) {
            Logger.getLogger(Clientes.class.getName()).log(Level.SEVERE, null, ex);
        }      
    }

    private void actualizarTablaComprobante(ResultSet rs) {
        DefaultTableModel dtm=(DefaultTableModel) jtaComprobantes.getModel();
        Object[] object = null;
        limpiarTabla(dtm);
        int i=0;
        try {
            while(rs.next() && rs.getString("serieComprobante")!=null){
                dtm.addRow(object);
                String tempSerie=rs.getString("serieComprobante");
                listComprobantes.add(tempSerie);
                dtm.setValueAt(tempSerie.substring(0,3), i, 0);
                dtm.setValueAt(tempSerie.substring(3,11), i, 1);
                dtm.setValueAt(rs.getDate("fechaEmision"), i, 2);
                dtm.setValueAt(rs.getString("nombre"), i, 3);
                dtm.setValueAt(rs.getString("numero"), i, 4);
                dtm.setValueAt(rs.getFloat("total"), i, 5);
                dtm.setValueAt(rs.getString("estado"), i, 6);
                i++;
            }
        } catch (SQLException ex) {
            Logger.getLogger(BuscarComprobante.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void limpiarTabla(DefaultTableModel dtm) {
        int tamTabla=dtm.getRowCount();
        for(int i=0;i<tamTabla;i++){
            dtm.removeRow(0);
        }
    }
    private void agregarProductos(String serie){
        PreparedStatement stmt;
        listProducto=new ArrayList<Producto>();
        try {
            stmt = conn.prepareStatement("select * from (Producto_has_ComprobantePago  cp inner join Producto p on cp.Producto_idProducto=p.idProducto) inner join Empresa_has_Producto ehp on ehp.Producto_idProducto = p.idProducto where ComprobantePago_serieComprobante=? and ComprobantePago_Empresa_idEmpresa=? and ComprobantePago_TipoComprobante_idTipoComprobante=?");
            stmt.setString(1, serie);
            stmt.setInt(2, idEmpresa);
            stmt.setString(3, tipoComprobante);
            Producto tempProducto;
            ResultSet rs=stmt.executeQuery();
            while(rs.next()){
                tempProducto=new Producto();
                tempProducto.setIdProducto(rs.getString("idProducto"));
                tempProducto.setDescripcion(rs.getString("descripcion"));
                tempProducto.setPrecioUnit(rs.getFloat("precioUnit"));
                tempProducto.setUnidadMedida(rs.getString("unidadMedida"));
                tempProducto.setEmpresaIdEmpresa(rs.getInt("Empresa_idEmpresa"));
                tempProducto.setCantidad(rs.getFloat("cantidad"));
                tempProducto.setImpuesto(rs.getFloat("impuesto"));
                listProducto.add(tempProducto);
            }
            comp.setListProductos(listProducto);
        } catch (SQLException ex) {
            Logger.getLogger(BuscarComprobante.class.getName()).log(Level.SEVERE, null, ex);
        }
            
    }
    private void agregarComprobante(String serie){
        PreparedStatement stmt;
        try {
            stmt = conn.prepareStatement("select * from ComprobantePago where serieComprobante=? and TipoComprobante_idTipoComprobante=? and Empresa_idEmpresa=?");
            stmt.setString(1, serie);
            stmt.setString(2, tipoComprobante);
            stmt.setInt(3, idEmpresa);
            ResultSet rs=stmt.executeQuery();
            ComprobantePago tempComporbante = null;
            while(rs.next()){
                tempComporbante=new ComprobantePago();
                tempComporbante.setSerieComprobante(rs.getString("serieComprobante"));
                tempComporbante.setSaldoBruto(rs.getFloat("saldoBruto"));
                tempComporbante.setImpuesto(rs.getFloat("impuesto"));
                tempComporbante.setTotal(rs.getFloat("total"));
                tempComporbante.setMoneda(rs.getString("moneda"));
                tempComporbante.setFechaEmision(rs.getDate("fechaEmision"));
                tempComporbante.setObservacion(rs.getString("observacion"));
                tempComporbante.setEstado(rs.getString("estado"));
                tempComporbante.setEmpresaIdEmpresa(rs.getInt("Empresa_idEmpresa"));
                tempComporbante.setImpuesto(rs.getFloat("impuesto"));
                tempComporbante.setNumGuia(rs.getString("numGuia"));
                tempComporbante.setSerieGuia(rs.getString("serieGuia"));
                tempComporbante.setDescuentoGlobal(rs.getInt("descuentoGlobal"));
                tempComporbante.setMotivo(rs.getInt("motivo"));
                tempComporbante.setTipoComprobanteIdTipoComprobante(rs.getString("TipoComprobante_idTipoComprobante"));
            }
            if(!band)comp.setComprobante(tempComporbante);
            else comp.setComprobanteModificar(tempComporbante);
        } catch (SQLException ex) {
            Logger.getLogger(BuscarComprobante.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    public void setCellRender(JTable table) {
        Enumeration<TableColumn> en = table.getColumnModel().getColumns();
        while (en.hasMoreElements()) {
            TableColumn tc = en.nextElement();
            tc.setCellRenderer(new CellRenderer());
        }
    }
}
